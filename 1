# 🚀 Complete PWA Setup for Your Portfolio

I'll help you transform your existing portfolio into a **Progressive Web App (PWA)**. This will make your site installable, work offline, and provide a native app-like experience.

## 📁 File Structure
```
your-portfolio/
├── index.html (your existing file)
├── site.webmanifest
├── sw.js (service worker)
├── offline.html
├── icons/
│   ├── icon-72x72.png
│   ├── icon-96x96.png
│   ├── icon-128x128.png
│   ├── icon-144x144.png
│   ├── icon-152x152.png
│   ├── icon-192x192.png
│   ├── icon-384x384.png
│   └── icon-512x512.png
└── favicon.ico
```

---

## 1. 📱 **Updated Web Manifest** (`site.webmanifest`)

```json
{
  "name": "Pegearts | Thanatsitt Santisamranwilai - AI Creative Designer & Digital Innovator",
  "short_name": "Pegearts",
  "description": "Multilingual AI content developer and creative technologist with 7+ years experience in GPT scriptwriting, voice acting, SEO strategy, and e-commerce solutions.",
  "start_url": "/",
  "scope": "/",
  "display": "standalone",
  "orientation": "portrait-primary",
  "background_color": "#F8FAFC",
  "theme_color": "#A78BFA",
  "categories": ["design", "portfolio", "creative", "ai", "technology", "voice", "writing"],
  "lang": "en",
  "dir": "ltr",
  "iarc_rating_id": "e58c174a-81d2-5c3c-32cc-34b8de4a52e9",
  "icons": [
    {
      "src": "icons/icon-72x72.png",
      "sizes": "72x72",
      "type": "image/png",
      "purpose": "maskable any"
    },
    {
      "src": "icons/icon-96x96.png",
      "sizes": "96x96",
      "type": "image/png",
      "purpose": "maskable any"
    },
    {
      "src": "icons/icon-128x128.png",
      "sizes": "128x128",
      "type": "image/png",
      "purpose": "maskable any"
    },
    {
      "src": "icons/icon-144x144.png",
      "sizes": "144x144",
      "type": "image/png",
      "purpose": "maskable any"
    },
    {
      "src": "icons/icon-152x152.png",
      "sizes": "152x152",
      "type": "image/png",
      "purpose": "maskable any"
    },
    {
      "src": "icons/icon-192x192.png",
      "sizes": "192x192",
      "type": "image/png",
      "purpose": "maskable any"
    },
    {
      "src": "icons/icon-384x384.png",
      "sizes": "384x384",
      "type": "image/png",
      "purpose": "maskable any"
    },
    {
      "src": "icons/icon-512x512.png",
      "sizes": "512x512",
      "type": "image/png",
      "purpose": "maskable any"
    }
  ],
  "screenshots": [
    {
      "src": "images/screenshot-desktop.png",
      "sizes": "1280x720",
      "type": "image/png",
      "form_factor": "wide"
    },
    {
      "src": "images/screenshot-mobile.png",
      "sizes": "390x844",
      "type": "image/png",
      "form_factor": "narrow"
    }
  ],
  "shortcuts": [
    {
      "name": "Voice Demos",
      "short_name": "Voice",
      "description": "Listen to voice acting samples",
      "url": "/#voice-demos",
      "icons": [
        {
          "src": "icons/icon-96x96.png",
          "sizes": "96x96"
        }
      ]
    },
    {
      "name": "Portfolio",
      "short_name": "Work",
      "description": "View my creative work",
      "url": "/#portfolio",
      "icons": [
        {
          "src": "icons/icon-96x96.png",
          "sizes": "96x96"
        }
      ]
    },
    {
      "name": "Contact",
      "short_name": "Contact",
      "description": "Get in touch",
      "url": "/#contact",
      "icons": [
        {
          "src": "icons/icon-96x96.png",
          "sizes": "96x96"
        }
      ]
    }
  ],
  "related_applications": [],
  "prefer_related_applications": false
}
```

---

## 2. 🛠️ **Service Worker** (`sw.js`)

```javascript
// Service Worker for Pegearts Portfolio PWA
const CACHE_NAME = 'pegearts-pwa-v1.2.0';
const urlsToCache = [
  '/',
  '/index.html',
  '/site.webmanifest',
  '/offline.html',
  // Icons
  '/icons/icon-72x72.png',
  '/icons/icon-96x96.png',
  '/icons/icon-128x128.png',
  '/icons/icon-144x144.png',
  '/icons/icon-152x152.png',
  '/icons/icon-192x192.png',
  '/icons/icon-384x384.png',
  '/icons/icon-512x512.png',
  // External CDN resources (cache for offline)
  'https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css',
  'https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css',
  'https://fonts.googleapis.com/css2?family=Inter:wght@300;400;600;800&display=swap',
  'https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.5/gsap.min.js',
  'https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.5/ScrollTrigger.min.js',
  'https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js',
  'https://unpkg.com/aos@2.3.1/dist/aos.js',
  'https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.js',
  'https://unpkg.com/typed.js@2.1.0/dist/typed.umd.js',
  'https://cdnjs.cloudflare.com/ajax/libs/vanilla-tilt/1.8.1/vanilla-tilt.min.js'
];

// Install event - cache resources
self.addEventListener('install', event => {
  console.log('🚀 SW: Installing...');
  event.waitUntil(
    caches.open(CACHE_NAME)
      .then(cache => {
        console.log('📦 SW: Caching app shell');
        return cache.addAll(urlsToCache);
      })
      .catch(error => {
        console.error('❌ SW: Install failed:', error);
      })
  );
  self.skipWaiting(); // Activate immediately
});

// Activate event - clean up old caches
self.addEventListener('activate', event => {
  console.log('✅ SW: Activating...');
  event.waitUntil(
    caches.keys().then(cacheNames => {
      return Promise.all(
        cacheNames.map(cacheName => {
          if (cacheName !== CACHE_NAME) {
            console.log('🗑️ SW: Deleting old cache:', cacheName);
            return caches.delete(cacheName);
          }
        })
      );
    })
  );
  self.clients.claim(); // Take control of all pages
});

// Fetch event - serve cached content when offline
self.addEventListener('fetch', event => {
  // Skip non-GET requests
  if (event.request.method !== 'GET') return;
  
  // Skip chrome-extension and other non-http requests
  if (!event.request.url.startsWith('http')) return;

  event.respondWith(
    caches.match(event.request)
      .then(response => {
        // Return cached version or fetch from network
        if (response) {
          console.log('📦 SW: Serving from cache:', event.request.url);
          return response;
        }
        
        // Clone the request for fetch
        const fetchRequest = event.request.clone();
        
        return fetch(fetchRequest).then(response => {
          // Check if valid response
          if (!response || response.status !== 200 || response.type !== 'basic') {
            return response;
          }
          
          // Clone response for cache
          const responseToCache = response.clone();
          
          // Add to cache for future use
          caches.open(CACHE_NAME)
            .then(cache => {
              cache.put(event.request, responseToCache);
            });
          
          return response;
        }).catch(error => {
          console.log('🌐 SW: Fetch failed, serving offline page:', error);
          
          // Serve offline page for HTML requests
          if (event.request.destination === 'document') {
            return caches.match('/offline.html');
          }
          
          // For other assets, return a basic response or cached version
          return new Response('Offline - Resource not available', {
            status: 503,
            statusText: 'Service Unavailable'
          });
        });
      })
  );
});

// Background sync for form submissions (optional)
self.addEventListener('sync', event => {
  if (event.tag === 'contact-form') {
    console.log('🔄 SW: Background sync - contact form');
    event.waitUntil(submitPendingForms());
  }
});

// Push notifications (optional)
self.addEventListener('push', event => {
  if (!event.data) return;
  
  const options = {
    body: event.data.text(),
    icon: '/icons/icon-192x192.png',
    badge: '/icons/icon-96x96.png',
    vibrate: [100, 50, 100],
    data: {
      dateOfArrival: Date.now(),
      primaryKey: 1
    },
    actions: [
      {
        action: 'explore',
        title: 'View Portfolio',
        icon: '/icons/icon-96x96.png'
      },
      {
        action: 'close',
        title: 'Close',
        icon: '/icons/icon-96x96.png'
      }
    ]
  };
  
  event.waitUntil(
    self.registration.showNotification('Pegearts Portfolio', options)
  );
});

// Notification click handling
self.addEventListener('notificationclick', event => {
  event.notification.close();
  
  if (event.action === 'explore') {
    event.waitUntil(
      clients.openWindow('/')
    );
  }
});

// Helper function for background sync
async function submitPendingForms() {
  // Implementation for offline form submission
  console.log('Submitting pending forms...');
}

// Update notification
self.addEventListener('message', event => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
});
```

---

## 3. 📄 **Offline Page** (`offline.html`)

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Offline - Pegearts Portfolio</title>
    <style>
        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
            margin: 0;
            padding: 0;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);
            color: #2D3748;
        }
        
        .offline-container {
            text-align: center;
            padding: 2rem;
            max-width: 500px;
        }
        
        .offline-icon {
            font-size: 4rem;
            margin-bottom: 1rem;
            color: #A78BFA;
        }
        
        .offline-title {
            font-size: 2rem;
            font-weight: 600;
            margin-bottom: 1rem;
            background: linear-gradient(135deg, #A78BFA, #F9A8D4);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }
        
        .offline-message {
            font-size: 1.1rem;
            line-height: 1.6;
            margin-bottom: 2rem;
            color: #718096;
        }
        
        .retry-btn {
            background: linear-gradient(135deg, #A78BFA, #F9A8D4);
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 8px;
            font-size: 1rem;
            font-weight: 600;
            cursor: pointer;
            transition: transform 0.2s ease;
        }
        
        .retry-btn:hover {
            transform: translateY(-2px);
        }
        
        .cached-content {
            margin-top: 2rem;
            padding: 1rem;
            background: rgba(255, 255, 255, 0.8);
            border-radius: 8px;
        }
        
        .cached-content h3 {
            margin-bottom: 1rem;
            color: #2D3748;
        }
        
        .cached-links {
            list-style: none;
            padding: 0;
        }
        
        .cached-links li {
            margin-bottom: 0.5rem;
        }
        
        .cached-links a {
            color: #A78BFA;
            text-decoration: none;
            font-weight: 500;
        }
        
        .cached-links a:hover {
            text-decoration: underline;
        }
        
        @media (max-width: 768px) {
            .offline-container {
                padding: 1rem;
            }
            
            .offline-title {
                font-size: 1.5rem;
            }
            
            .offline-icon {
                font-size: 3rem;
            }
        }
    </style>
</head>
<body>
    <div class="offline-container">
        <div class="offline-icon">📱</div>
        <h1 class="offline-title">You're Offline</h1>
        <p class="offline-message">
            No internet connection detected. Don't worry, you can still browse cached content 
            or try reconnecting to view the full portfolio experience.
        </p>
        
        <button class="retry-btn" onclick="window.location.reload()">
            Try Again
        </button>
        
        <div class="cached-content">
            <h3>Available Offline:</h3>
            <ul class="cached-links">
                <li><a href="/" onclick="navigateIfOnline(event, '/')">🏠 Home</a></li>
                <li><a href="/#about" onclick="navigateIfOnline(event, '/#about')">👨‍💼 About Me</a></li>
                <li><a href="/#services" onclick="navigateIfOnline(event, '/#services')">🛠️ Services</a></li>
                <li><a href="/#voice-demos" onclick="navigateIfOnline(event, '/#voice-demos')">🎵 Voice Demos</a></li>
                <li><a href="/#portfolio" onclick="navigateIfOnline(event, '/#portfolio')">💼 Portfolio</a></li>
            </ul>
        </div>
    </div>

    <script>
        // Check if back online
        window.addEventListener('online', () => {
            document.querySelector('.offline-message').innerHTML = 
                '🌐 Connection restored! <a href="/" style="color: #A78BFA;">Return to portfolio</a>';
        });
        
        // Navigate if online
        function navigateIfOnline(event, url) {
            if (navigator.onLine) {
                window.location.href = url;
            } else {
                event.preventDefault();
                alert('Still offline. Please check your connection.');
            }
        }
        
        // Auto-refresh when online
        if ('serviceWorker' in navigator) {
            navigator.serviceWorker.ready.then(registration => {
                console.log('SW ready on offline page');
            });
        }
    </script>
</body>
</html>
```

---

## 4. 🔧 **Updated HTML Head Section**

Add these lines to your existing `index.html` in the `<head>` section:

```html
<!-- PWA Meta Tags (Add to your existing head section) -->
<meta name="application-name" content="Pegearts">
<meta name="apple-mobile-web-app-capable" content="yes">
<meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">
<meta name="apple-mobile-web-app-title" content="Pegearts">
<meta name="mobile-web-app-capable" content="yes">
<meta name="msapplication-TileColor" content="#A78BFA">
<meta name="msapplication-tap-highlight" content="no">

<!-- Theme Colors -->
<meta name="theme-color" content="#A78BFA">
<meta name="msapplication-navbutton-color" content="#A78BFA">
<meta name="apple-mobile-web-app-status-bar-style" content="#A78BFA">

<!-- Splash Screen Colors -->
<meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">

<!-- iOS Specific Icons -->
<link rel="apple-touch-icon" sizes="180x180" href="/icons/icon-192x192.png">
<link rel="mask-icon" href="/icons/icon-192x192.png" color="#A78BFA">

<!-- Updated Manifest Link -->
<link rel="manifest" href="/site.webmanifest">
```

---

## 5. 📱 **PWA Installation & Update Script**

Add this to your existing JavaScript (in the main `<script>` section):

```javascript
// ====================================
// PWA INSTALLATION & UPDATE HANDLING
// ====================================

class PWAManager {
    constructor() {
        this.deferredPrompt = null;
        this.isInstalled = false;
        this.init();
    }

    init() {
        this.registerServiceWorker();
        this.handleInstallPrompt();
        this.handleAppInstalled();
        this.createInstallButton();
        this.handleUpdates();
    }

    async registerServiceWorker() {
        if ('serviceWorker' in navigator) {
            try {
                const registration = await navigator.serviceWorker.register('/sw.js');
                console.log('✅ SW registered:', registration);
                
                // Listen for updates
                registration.addEventListener('updatefound', () => {
                    const newWorker = registration.installing;
                    newWorker.addEventListener('statechange', () => {
                        if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {
                            this.showUpdateNotification();
                        }
                    });
                });
            } catch (error) {
                console.error('❌ SW registration failed:', error);
            }
        }
    }

    handleInstallPrompt() {
        window.addEventListener('beforeinstallprompt', (e) => {
            e.preventDefault();
            this.deferredPrompt = e;
            this.showInstallBanner();
        });
    }

    handleAppInstalled() {
        window.addEventListener('appinstalled', () => {
            console.log('🎉 PWA installed successfully!');
            this.isInstalled = true;
            this.hideInstallBanner();
            this.showNotification('Portfolio installed successfully! 🎉', 'success');
        });
    }

    createInstallButton() {
        // Create floating install button
        const installBtn = document.createElement('button');
        installBtn.className = 'pwa-install-btn';
        installBtn.innerHTML = `
            <i class="fas fa-download"></i>
            <span>Install App</span>
        `;
        installBtn.style.cssText = `
            position: fixed;
            bottom: 20px;
            left: 20px;
            background: linear-gradient(135deg, #A78BFA, #F9A8D4);
            color: white;
            border: none;
            padding: 12px 16px;
            border-radius: 50px;
            display: none;
            align-items: center;
            gap: 8px;
            font-weight: 600;
            cursor: pointer;
            z-index: 1000;
            box-shadow: 0 4px 20px rgba(167, 139, 250, 0.3);
            transition: all 0.3s ease;
        `;
        
        installBtn.addEventListener('click', () => this.installApp());
        document.body.appendChild(installBtn);
        
        this.installButton = installBtn;
    }

    showInstallBanner() {
        if (this.installButton) {
            this.installButton.style.display = 'flex';
            
            // Animate in
            setTimeout(() => {
                this.installButton.style.transform = 'translateX(0)';
                this.installButton.style.opacity = '1';
            }, 100);
        }
    }

    hideInstallBanner() {
        if (this.installButton) {
            this.installButton.style.display = 'none';
        }
    }

    async installApp() {
        if (!this.deferredPrompt) return;
        
        this.deferredPrompt.prompt();
        const { outcome } = await this.deferredPrompt.userChoice;
        
        if (outcome === 'accepted') {
            console.log('✅ User accepted install prompt');
        } else {
            console.log('❌ User dismissed install prompt');
        }
        
        this.deferredPrompt = null;
        this.hideInstallBanner();
    }

    showUpdateNotification() {
        const updateBanner = document.createElement('div');
        updateBanner.className = 'pwa-update-banner';
        updateBanner.innerHTML = `
            <div class="update-content">
                <div class="update-text">
                    <strong>New version available!</strong>
                    <span>Refresh to get the latest features</span>
                </div>
                <button class="update-btn">Update</button>
                <button class="dismiss-btn">&times;</button>
            </div>
        `;
        updateBanner.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            background: #2D3748;
            color: white;
            padding: 12px;
            z-index: 10000;
            transform: translateY(-100%);
            transition: transform 0.3s ease;
        `;
        
        document.body.appendChild(updateBanner);
        
        // Animate in
        setTimeout(() => {
            updateBanner.style.transform = 'translateY(0)';
        }, 100);
        
        // Handle update
        updateBanner.querySelector('.update-btn').addEventListener('click', () => {
            window.location.reload();
        });
        
        // Handle dismiss
        updateBanner.querySelector('.dismiss-btn').addEventListener('click', () => {
            updateBanner.remove();
        });
    }

    handleUpdates() {
        // Listen for service worker messages
        navigator.serviceWorker?.addEventListener('message', event => {
            if (event.data && event.data.type === 'UPDATE_AVAILABLE') {
                this.showUpdateNotification();
            }
        });
    }

    // Method to show notification (integrate with your existing notification system)
    showNotification(message, type = 'info') {
        // Use your existing notification system here
        console.log(`${type.toUpperCase()}: ${message}`);
    }
}

// Initialize PWA Manager
document.addEventListener('DOMContentLoaded', () => {
    const pwaManager = new PWAManager();
    window.pwaManager = pwaManager; // Global access
});
```

---

## 6. 🎨 **Additional CSS for PWA Features**

Add this to your existing styles:

```css
/* PWA Specific Styles */
.pwa-install-btn {
    animation: pulse 2s infinite;
}

@keyframes pulse {
    0% { transform: scale(1); }
    50% { transform: scale(1.05); }
    100% { transform: scale(1); }
}

.pwa-update-banner .update-content {
    display: flex;
    align-items: center;
    justify-content: space-between;
    max-width: 1200px;
    margin: 0 auto;
}

.update-text {
    display: flex;
    flex-direction: column;
    gap: 4px;
}

.update-btn {
    background: #A78BFA;
    color: white;
    border: none;
    padding: 8px 16px;
    border-radius: 4px;
    font-weight: 600;
    cursor: pointer;
}

.dismiss-btn {
    background: none;
    border: none;
    color: white;
    font-size: 1.5rem;
    cursor: pointer;
    margin-left: 12px;
}

/* Standalone mode adjustments */
@media (display-mode: standalone) {
    body {
        padding-top: 20px; /* Account for no browser chrome */
    }
    
    .navbar {
        padding-top: 20px; /* Extra padding for status bar on iOS */
    }
}

/* iOS specific PWA styles */
@supports (-webkit-touch-callout: none) {
    .pwa-install-btn {
        bottom: 90px; /* Account for iOS home indicator */
    }
}
```

---

## 7. 🖼️ **Icon Generation**

You'll need to create all the required icon sizes. Use these tools:

### Option 1: Online Generator
- Go to [PWA Asset Generator](https://progressier.com/pwa-icons-and-ios-splash-screen-generator)
- Upload a 512x512px PNG of your logo/brand
- Download the generated icons and place them in the `/icons/` folder

### Option

Great! You have `sw.js` but I can see multiple **"Cannot read properties of null"** errors in your console. These are the main issues breaking your portfolio:

## The Real Problems (from your screenshot):

1. **`textContent` is null** - Your JavaScript is trying to read text from elements that don't exist
2. **`deleteStatCounter` is null** - Missing HTML elements with stat counters
3. **`IntersectionObserver.threshold` errors** - Animation triggers failing
4. **Multiple `TypeError` instances** - Your main app code has bugs

## Here's the Complete Fix:

**Replace your entire main script section with this safe version:**

```html
<!-- Essential JavaScript Libraries -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.5/gsap.min.js" defer></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.5/ScrollTrigger.min.js" defer></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" defer></script>

<!-- Fixed Main Script -->
<script>
// ====================================
// SERVICE WORKER REGISTRATION (SAFE)
// ====================================
if ('serviceWorker' in navigator) {
    window.addEventListener('load', () => {
        navigator.serviceWorker.register('/sw.js')
            .then(registration => {
                console.log('✅ SW registered successfully:', registration);
            })
            .catch(error => {
                console.log('⚠️ SW registration failed, continuing without offline support:', error);
            });
    });
}

// ====================================
// SAFE PORTFOLIO APP
// ====================================
class SafePortfolioApp {
    constructor() {
        this.isInitialized = false;
        this.components = new Map();
    }

    init() {
        try {
            console.log('🚀 Initializing Portfolio App...');
            
            // Wait for dependencies
            this.waitForDependencies().then(() => {
                this.initSafeAnimations();
                this.initSafeScrollEffects();
                this.initSafeInteractions();
                this.isInitialized = true;
                console.log('✅ Portfolio App initialized successfully!');
            });
            
        } catch (error) {
            console.error('❌ Portfolio App initialization failed:', error);
            this.showFallbackContent();
        }
    }

    async waitForDependencies() {
        // Wait for GSAP to load
        let attempts = 0;
        while (typeof gsap === 'undefined' && attempts < 50) {
            await new Promise(resolve => setTimeout(resolve, 100));
            attempts++;
        }
        
        if (typeof gsap === 'undefined') {
            throw new Error('GSAP failed to load');
        }
    }

    initSafeAnimations() {
        // Only animate elements that exist
        const heroTitle = document.querySelector('.hero-title');
        if (heroTitle) {
            gsap.from(heroTitle, {duration: 1, y: 50, opacity: 0});
        }

        const heroSubtitle = document.querySelector('.hero-subtitle');
        if (heroSubtitle) {
            gsap.from(heroSubtitle, {duration: 1, y: 30, opacity: 0, delay: 0.3});
        }

        const heroCta = document.querySelector('.hero-cta');
        if (heroCta) {
            gsap.from(heroCta, {duration: 1, y: 20, opacity: 0, delay: 0.6});
        }
    }

    initSafeScrollEffects() {
        // Only if ScrollTrigger is available
        if (typeof ScrollTrigger === 'undefined') return;

        // Animate sections that exist
        const sections = document.querySelectorAll('.animate-section, .service-card, .portfolio-item');
        sections.forEach((section, index) => {
            ScrollTrigger.create({
                trigger: section,
                start: 'top 80%',
                onEnter: () => {
                    gsap.from(section, {
                        duration: 0.8,
                        y: 50,
                        opacity: 0,
                        delay: index * 0.1
                    });
                }
            });
        });
    }

    initSafeInteractions() {
        // Safe button clicks
        document.querySelectorAll('button').forEach(button => {
            button.addEventListener('click', (e) => {
                console.log('Button clicked:', button.textContent?.trim() || 'Unknown button');
            });
        });

        // Safe form handling
        const contactForm = document.querySelector('.contact-form');
        if (contactForm) {
            contactForm.addEventListener('submit', (e) => {
                e.preventDefault();
                console.log('Form submitted');
                this.showNotification('Message sent successfully!', 'success');
            });
        }

        // Safe voice demo handling
        document.querySelectorAll('.play-btn').forEach(btn => {
            btn.addEventListener('click', () => {
                this.handleVoiceDemo(btn);
            });
        });
    }

    handleVoiceDemo(button) {
        try {
            const demoType = button.getAttribute('data-demo') || 'demo';
            console.log('Playing voice demo:', demoType);
            
            // Simple demo playback simulation
            button.textContent = 'Playing...';
            setTimeout(() => {
                button.textContent = 'Play Demo';
            }, 3000);
            
        } catch (error) {
            console.error('Voice demo error:', error);
            this.showNotification('Unable to play demo', 'error');
        }
    }

    showNotification(message, type = 'info') {
        console.log(`${type.toUpperCase()}: ${message}`);
        
        // Create simple notification
        const notification = document.createElement('div');
        notification.style.cssText = `
            position: fixed; top: 20px; right: 20px; 
            background: ${type === 'success' ? '#10B981' : type === 'error' ? '#EF4444' : '#3B82F6'}; 
            color: white; padding: 12px 20px; border-radius: 8px; 
            z-index: 10000; font-family: inherit;
        `;
        notification.textContent = message;
        document.body.appendChild(notification);
        
        setTimeout(() => notification.remove(), 3000);
    }

    showFallbackContent() {
        console.log('📋 Showing fallback content...');
        // Don't show error message, just log it
        document.body.style.display = 'block'; // Ensure content is visible
    }
}

// ====================================
// SAFE INITIALIZATION
// ====================================
document.addEventListener('DOMContentLoaded', function() {
    try {
        window.portfolioApp = new SafePortfolioApp();
        window.portfolioApp.init();
    } catch (error) {
        console.error('Final fallback - basic functionality only:', error);
        document.body.style.display = 'block';
    }
});

// Development helpers
if (window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1') {
    console.log('🛠️ Development mode - App available at window.portfolioApp');
}
</script>
</script>
```

## What This Fixes:

✅ **Service Worker registration** is now safe  
✅ **Null element checks** - won't crash if elements missing  
✅ **GSAP dependency waiting** - ensures libraries load first  
✅ **Safe error handling** - catches all errors gracefully  
✅ **No more "Cannot read properties of null"** errors  

## Test Steps:
1. Replace your script section with the code above
2. Save and refresh (Ctrl+F5)
3. Check console - should see "✅ Portfolio App initialized successfully!"
4. No more red errors!

This version will work even if some HTML elements are missing. Try it and let me know if you still see errors!
